#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TennisLeagueComponents.Data.DataContext
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Tennis")]
	public partial class TennisDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertSeason(Season instance);
    partial void UpdateSeason(Season instance);
    partial void DeleteSeason(Season instance);
    partial void InsertMatchSet(MatchSet instance);
    partial void UpdateMatchSet(MatchSet instance);
    partial void DeleteMatchSet(MatchSet instance);
    partial void InsertDivision(Division instance);
    partial void UpdateDivision(Division instance);
    partial void DeleteDivision(Division instance);
    partial void InsertDivisionPlayer(DivisionPlayer instance);
    partial void UpdateDivisionPlayer(DivisionPlayer instance);
    partial void DeleteDivisionPlayer(DivisionPlayer instance);
    partial void InsertLeague(League instance);
    partial void UpdateLeague(League instance);
    partial void DeleteLeague(League instance);
    partial void InsertPlayer(Player instance);
    partial void UpdatePlayer(Player instance);
    partial void DeletePlayer(Player instance);
    #endregion
		
		public TennisDataContext() : 
				base(global::TennisLeagueComponents.Properties.Settings.Default.TennisConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TennisDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TennisDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TennisDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TennisDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Match> Matches
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<Season> Seasons
		{
			get
			{
				return this.GetTable<Season>();
			}
		}
		
		public System.Data.Linq.Table<MatchSet> MatchSets
		{
			get
			{
				return this.GetTable<MatchSet>();
			}
		}
		
		public System.Data.Linq.Table<Division> Divisions
		{
			get
			{
				return this.GetTable<Division>();
			}
		}
		
		public System.Data.Linq.Table<DivisionPlayer> DivisionPlayers
		{
			get
			{
				return this.GetTable<DivisionPlayer>();
			}
		}
		
		public System.Data.Linq.Table<League> Leagues
		{
			get
			{
				return this.GetTable<League>();
			}
		}
		
		public System.Data.Linq.Table<Player> Players
		{
			get
			{
				return this.GetTable<Player>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Play.Match")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _HomePlayerId;
		
		private int _AwayPlayerId;
		
		private int _WeekNumber;
		
		private int _DivisionId;
		
		private DateTime? _MatchDate;
		
		private EntitySet<MatchSet> _MatchSets;
		
		private EntityRef<Division> _Division;
		
		private EntityRef<Player> _Player;
		
		private EntityRef<Player> _Player1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnHomePlayerIdChanging(int value);
    partial void OnHomePlayerIdChanged();
    partial void OnAwayPlayerIdChanging(int value);
    partial void OnAwayPlayerIdChanged();
    partial void OnWeekNumberChanging(int value);
    partial void OnWeekNumberChanged();
    partial void OnDivisionIdChanging(int value);
    partial void OnDivisionIdChanged();
    partial void OnMatchDateChanging(DateTime? value);
    partial void OnMatchDateChanged();
    #endregion
		
		public Match()
		{
			this._MatchSets = new EntitySet<MatchSet>(new Action<MatchSet>(this.attach_MatchSets), new Action<MatchSet>(this.detach_MatchSets));
			this._Division = default(EntityRef<Division>);
			this._Player = default(EntityRef<Player>);
			this._Player1 = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePlayerId", DbType="Int NOT NULL")]
		public int HomePlayerId
		{
			get
			{
				return this._HomePlayerId;
			}
			set
			{
				if ((this._HomePlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHomePlayerIdChanging(value);
					this.SendPropertyChanging();
					this._HomePlayerId = value;
					this.SendPropertyChanged("HomePlayerId");
					this.OnHomePlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayPlayerId", DbType="Int NOT NULL")]
		public int AwayPlayerId
		{
			get
			{
				return this._AwayPlayerId;
			}
			set
			{
				if ((this._AwayPlayerId != value))
				{
					if (this._Player1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAwayPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._AwayPlayerId = value;
					this.SendPropertyChanged("AwayPlayerId");
					this.OnAwayPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekNumber", DbType="Int NOT NULL")]
		public int WeekNumber
		{
			get
			{
				return this._WeekNumber;
			}
			set
			{
				if ((this._WeekNumber != value))
				{
					this.OnWeekNumberChanging(value);
					this.SendPropertyChanging();
					this._WeekNumber = value;
					this.SendPropertyChanged("WeekNumber");
					this.OnWeekNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionId", DbType="Int NOT NULL")]
		public int DivisionId
		{
			get
			{
				return this._DivisionId;
			}
			set
			{
				if ((this._DivisionId != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDivisionIdChanging(value);
					this.SendPropertyChanging();
					this._DivisionId = value;
					this.SendPropertyChanged("DivisionId");
					this.OnDivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchDate", DbType="DateTime2 NULL", CanBeNull=false)]
		public DateTime? MatchDate
		{
			get
			{
				return this._MatchDate;
			}
			set
			{
				if ((this._MatchDate != value))
				{
					this.OnMatchDateChanging(value);
					this.SendPropertyChanging();
					this._MatchDate = value;
					this.SendPropertyChanged("MatchDate");
					this.OnMatchDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchSet", Storage="_MatchSets", ThisKey="Id", OtherKey="MatchId")]
		public EntitySet<MatchSet> MatchSets
		{
			get
			{
				return this._MatchSets;
			}
			set
			{
				this._MatchSets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Match", Storage="_Division", ThisKey="DivisionId", OtherKey="Id", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._DivisionId = value.Id;
					}
					else
					{
						this._DivisionId = default(int);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Match", Storage="_Player", ThisKey="HomePlayerId", OtherKey="Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.Matches.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.Matches.Add(this);
						this._HomePlayerId = value.Id;
					}
					else
					{
						this._HomePlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Match1", Storage="_Player1", ThisKey="AwayPlayerId", OtherKey="Id", IsForeignKey=true)]
		public Player Player1
		{
			get
			{
				return this._Player1.Entity;
			}
			set
			{
				Player previousValue = this._Player1.Entity;
				if (((previousValue != value) 
							|| (this._Player1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player1.Entity = null;
						previousValue.Matches1.Remove(this);
					}
					this._Player1.Entity = value;
					if ((value != null))
					{
						value.Matches1.Add(this);
						this._AwayPlayerId = value.Id;
					}
					else
					{
						this._AwayPlayerId = default(int);
					}
					this.SendPropertyChanged("Player1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MatchSets(MatchSet entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_MatchSets(MatchSet entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Structure.Season")]
	public partial class Season : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _LeagueId;
		
		private EntitySet<Division> _Divisions;
		
		private EntityRef<League> _League;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLeagueIdChanging(int value);
    partial void OnLeagueIdChanged();
    #endregion
		
		public Season()
		{
			this._Divisions = new EntitySet<Division>(new Action<Division>(this.attach_Divisions), new Action<Division>(this.detach_Divisions));
			this._League = default(EntityRef<League>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeagueId", DbType="Int NOT NULL")]
		public int LeagueId
		{
			get
			{
				return this._LeagueId;
			}
			set
			{
				if ((this._LeagueId != value))
				{
					if (this._League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIdChanging(value);
					this.SendPropertyChanging();
					this._LeagueId = value;
					this.SendPropertyChanged("LeagueId");
					this.OnLeagueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_Division", Storage="_Divisions", ThisKey="Id", OtherKey="SeasonId")]
		public EntitySet<Division> Divisions
		{
			get
			{
				return this._Divisions;
			}
			set
			{
				this._Divisions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_Season", Storage="_League", ThisKey="LeagueId", OtherKey="Id", IsForeignKey=true)]
		public League League
		{
			get
			{
				return this._League.Entity;
			}
			set
			{
				League previousValue = this._League.Entity;
				if (((previousValue != value) 
							|| (this._League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League.Entity = null;
						previousValue.Seasons.Remove(this);
					}
					this._League.Entity = value;
					if ((value != null))
					{
						value.Seasons.Add(this);
						this._LeagueId = value.Id;
					}
					else
					{
						this._LeagueId = default(int);
					}
					this.SendPropertyChanged("League");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Divisions(Division entity)
		{
			this.SendPropertyChanging();
			entity.Season = this;
		}
		
		private void detach_Divisions(Division entity)
		{
			this.SendPropertyChanging();
			entity.Season = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Play.MatchSet")]
	public partial class MatchSet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MatchId;
		
		private int _SetNumber;
		
		private int _HomeGamesWon;
		
		private int _AwayGamesWon;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMatchIdChanging(int value);
    partial void OnMatchIdChanged();
    partial void OnSetNumberChanging(int value);
    partial void OnSetNumberChanged();
    partial void OnHomeGamesWonChanging(int value);
    partial void OnHomeGamesWonChanged();
    partial void OnAwayGamesWonChanging(int value);
    partial void OnAwayGamesWonChanged();
    #endregion
		
		public MatchSet()
		{
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MatchId", DbType="Int NOT NULL")]
		public int MatchId
		{
			get
			{
				return this._MatchId;
			}
			set
			{
				if ((this._MatchId != value))
				{
					if (this._Match.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMatchIdChanging(value);
					this.SendPropertyChanging();
					this._MatchId = value;
					this.SendPropertyChanged("MatchId");
					this.OnMatchIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SetNumber", DbType="Int NOT NULL")]
		public int SetNumber
		{
			get
			{
				return this._SetNumber;
			}
			set
			{
				if ((this._SetNumber != value))
				{
					this.OnSetNumberChanging(value);
					this.SendPropertyChanging();
					this._SetNumber = value;
					this.SendPropertyChanged("SetNumber");
					this.OnSetNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeGamesWon", DbType="Int NOT NULL")]
		public int HomeGamesWon
		{
			get
			{
				return this._HomeGamesWon;
			}
			set
			{
				if ((this._HomeGamesWon != value))
				{
					this.OnHomeGamesWonChanging(value);
					this.SendPropertyChanging();
					this._HomeGamesWon = value;
					this.SendPropertyChanged("HomeGamesWon");
					this.OnHomeGamesWonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayGamesWon", DbType="Int NOT NULL")]
		public int AwayGamesWon
		{
			get
			{
				return this._AwayGamesWon;
			}
			set
			{
				if ((this._AwayGamesWon != value))
				{
					this.OnAwayGamesWonChanging(value);
					this.SendPropertyChanging();
					this._AwayGamesWon = value;
					this.SendPropertyChanged("AwayGamesWon");
					this.OnAwayGamesWonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Match_MatchSet", Storage="_Match", ThisKey="MatchId", OtherKey="Id", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.MatchSets.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.MatchSets.Add(this);
						this._MatchId = value.Id;
					}
					else
					{
						this._MatchId = default(int);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Structure.Division")]
	public partial class Division : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _SeasonId;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<DivisionPlayer> _DivisionPlayers;
		
		private EntityRef<Season> _Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSeasonIdChanging(int value);
    partial void OnSeasonIdChanged();
    #endregion
		
		public Division()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._DivisionPlayers = new EntitySet<DivisionPlayer>(new Action<DivisionPlayer>(this.attach_DivisionPlayers), new Action<DivisionPlayer>(this.detach_DivisionPlayers));
			this._Season = default(EntityRef<Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId", DbType="Int NOT NULL")]
		public int SeasonId
		{
			get
			{
				return this._SeasonId;
			}
			set
			{
				if ((this._SeasonId != value))
				{
					if (this._Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._SeasonId = value;
					this.SendPropertyChanged("SeasonId");
					this.OnSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_Match", Storage="_Matches", ThisKey="Id", OtherKey="DivisionId")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_DivisionPlayer", Storage="_DivisionPlayers", ThisKey="Id", OtherKey="DivisionId")]
		public EntitySet<DivisionPlayer> DivisionPlayers
		{
			get
			{
				return this._DivisionPlayers;
			}
			set
			{
				this._DivisionPlayers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_Division", Storage="_Season", ThisKey="SeasonId", OtherKey="Id", IsForeignKey=true)]
		public Season Season
		{
			get
			{
				return this._Season.Entity;
			}
			set
			{
				Season previousValue = this._Season.Entity;
				if (((previousValue != value) 
							|| (this._Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Season.Entity = null;
						previousValue.Divisions.Remove(this);
					}
					this._Season.Entity = value;
					if ((value != null))
					{
						value.Divisions.Add(this);
						this._SeasonId = value.Id;
					}
					else
					{
						this._SeasonId = default(int);
					}
					this.SendPropertyChanged("Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
		
		private void attach_DivisionPlayers(DivisionPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Division = this;
		}
		
		private void detach_DivisionPlayers(DivisionPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Division = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Structure.DivisionPlayer")]
	public partial class DivisionPlayer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _DivisionId;
		
		private int _PlayerId;
		
		private EntityRef<Division> _Division;
		
		private EntityRef<Player> _Player;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDivisionIdChanging(int value);
    partial void OnDivisionIdChanged();
    partial void OnPlayerIdChanging(int value);
    partial void OnPlayerIdChanged();
    #endregion
		
		public DivisionPlayer()
		{
			this._Division = default(EntityRef<Division>);
			this._Player = default(EntityRef<Player>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DivisionId", DbType="Int NOT NULL")]
		public int DivisionId
		{
			get
			{
				return this._DivisionId;
			}
			set
			{
				if ((this._DivisionId != value))
				{
					if (this._Division.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDivisionIdChanging(value);
					this.SendPropertyChanging();
					this._DivisionId = value;
					this.SendPropertyChanged("DivisionId");
					this.OnDivisionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayerId", DbType="Int NOT NULL")]
		public int PlayerId
		{
			get
			{
				return this._PlayerId;
			}
			set
			{
				if ((this._PlayerId != value))
				{
					if (this._Player.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._PlayerId = value;
					this.SendPropertyChanged("PlayerId");
					this.OnPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Division_DivisionPlayer", Storage="_Division", ThisKey="DivisionId", OtherKey="Id", IsForeignKey=true)]
		public Division Division
		{
			get
			{
				return this._Division.Entity;
			}
			set
			{
				Division previousValue = this._Division.Entity;
				if (((previousValue != value) 
							|| (this._Division.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Division.Entity = null;
						previousValue.DivisionPlayers.Remove(this);
					}
					this._Division.Entity = value;
					if ((value != null))
					{
						value.DivisionPlayers.Add(this);
						this._DivisionId = value.Id;
					}
					else
					{
						this._DivisionId = default(int);
					}
					this.SendPropertyChanged("Division");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_DivisionPlayer", Storage="_Player", ThisKey="PlayerId", OtherKey="Id", IsForeignKey=true)]
		public Player Player
		{
			get
			{
				return this._Player.Entity;
			}
			set
			{
				Player previousValue = this._Player.Entity;
				if (((previousValue != value) 
							|| (this._Player.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Player.Entity = null;
						previousValue.DivisionPlayers.Remove(this);
					}
					this._Player.Entity = value;
					if ((value != null))
					{
						value.DivisionPlayers.Add(this);
						this._PlayerId = value.Id;
					}
					else
					{
						this._PlayerId = default(int);
					}
					this.SendPropertyChanged("Player");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Structure.League")]
	public partial class League : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _OwnerPlayerId;
		
		private EntitySet<Season> _Seasons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOwnerPlayerIdChanging(int value);
    partial void OnOwnerPlayerIdChanged();
    #endregion
		
		public League()
		{
			this._Seasons = new EntitySet<Season>(new Action<Season>(this.attach_Seasons), new Action<Season>(this.detach_Seasons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerPlayerId", DbType="Int NOT NULL")]
		public int OwnerPlayerId
		{
			get
			{
				return this._OwnerPlayerId;
			}
			set
			{
				if ((this._OwnerPlayerId != value))
				{
					this.OnOwnerPlayerIdChanging(value);
					this.SendPropertyChanging();
					this._OwnerPlayerId = value;
					this.SendPropertyChanged("OwnerPlayerId");
					this.OnOwnerPlayerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="League_Season", Storage="_Seasons", ThisKey="Id", OtherKey="LeagueId")]
		public EntitySet<Season> Seasons
		{
			get
			{
				return this._Seasons;
			}
			set
			{
				this._Seasons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Seasons(Season entity)
		{
			this.SendPropertyChanging();
			entity.League = this;
		}
		
		private void detach_Seasons(Season entity)
		{
			this.SendPropertyChanging();
			entity.League = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="Structure.Player")]
	public partial class Player : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _EmailAddress;
		
		private string _CellPhone;
		
		private EntitySet<Match> _Matches;
		
		private EntitySet<Match> _Matches1;
		
		private EntitySet<DivisionPlayer> _DivisionPlayers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnCellPhoneChanging(string value);
    partial void OnCellPhoneChanged();
    #endregion
		
		public Player()
		{
			this._Matches = new EntitySet<Match>(new Action<Match>(this.attach_Matches), new Action<Match>(this.detach_Matches));
			this._Matches1 = new EntitySet<Match>(new Action<Match>(this.attach_Matches1), new Action<Match>(this.detach_Matches1));
			this._DivisionPlayers = new EntitySet<DivisionPlayer>(new Action<DivisionPlayer>(this.attach_DivisionPlayers), new Action<DivisionPlayer>(this.detach_DivisionPlayers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="NVarChar(50)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellPhone", DbType="NVarChar(20)")]
		public string CellPhone
		{
			get
			{
				return this._CellPhone;
			}
			set
			{
				if ((this._CellPhone != value))
				{
					this.OnCellPhoneChanging(value);
					this.SendPropertyChanging();
					this._CellPhone = value;
					this.SendPropertyChanged("CellPhone");
					this.OnCellPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Match", Storage="_Matches", ThisKey="Id", OtherKey="HomePlayerId")]
		public EntitySet<Match> Matches
		{
			get
			{
				return this._Matches;
			}
			set
			{
				this._Matches.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_Match1", Storage="_Matches1", ThisKey="Id", OtherKey="AwayPlayerId")]
		public EntitySet<Match> Matches1
		{
			get
			{
				return this._Matches1;
			}
			set
			{
				this._Matches1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Player_DivisionPlayer", Storage="_DivisionPlayers", ThisKey="Id", OtherKey="PlayerId")]
		public EntitySet<DivisionPlayer> DivisionPlayers
		{
			get
			{
				return this._DivisionPlayers;
			}
			set
			{
				this._DivisionPlayers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_Matches(Match entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
		
		private void attach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Player1 = this;
		}
		
		private void detach_Matches1(Match entity)
		{
			this.SendPropertyChanging();
			entity.Player1 = null;
		}
		
		private void attach_DivisionPlayers(DivisionPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Player = this;
		}
		
		private void detach_DivisionPlayers(DivisionPlayer entity)
		{
			this.SendPropertyChanging();
			entity.Player = null;
		}
	}
}
#pragma warning restore 1591
